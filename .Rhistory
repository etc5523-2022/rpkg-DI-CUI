available("asdata")
install.packages("available")
available("asdata")
available("asdata")
library(available)
available("asdata")
library(usethis)
usethis::create_package("asdata")
library(asdata)
asdata::plot_litres(c(0,10))
library(asdata)
library(asdata)
asdata::plot_servings("beer_servings")
library(asdata)
asdata::calculate_country_alcohol(c("China"), beer_servings)
asdata::calculate_country_alcohol("China", "beer_servings")
?calculate_country_alcohol
usethis::use_package_doc()
usethis::use_package_doc()
library(asdata)
usethis::use_vignette("global_alcohol_consumption")
library(asdata)
tab <- data.frame(Arguments = "`Litres`",
Description = "The range of total litres of pure alcohol.")
knitr::kable(tab)
# Mapping global alcohol consumption with total litres of pure alcohol in range (0,10)
result <- plotly_litres(Litres = c(0,10))
result
tab <- data.frame(Argument = "`type`",
Description = "The type of alcohol servings")
knitr::kable(tab)
# maps global beer servings.
beer_servings <- plot_servings("beer_servings")
beer_servings
tab <- data.frame(Arguments = c("`range`","`type`"),
Description = c("The alcohol servings is within this range","The type of alcohol servings"))
knitr::kable(tab)
# a dataset contains country with beer servings in range (0,100)
country_servings <- extract_country_servings(range = c(0,100), type = "beer_servings")
country_servings
country_servings %>%
head()
head(country_servings)
library(DT)
DT::datatable(country_servings)
# a dataset contains country with beer servings in range (0,100)
country_servings <- extract_country_servings(range = c(0,50), type = "beer_servings")
# a dataset contains country with beer servings in range (0,100)
country_servings <- extract_country_servings(range = c(0,20), type = "beer_servings")
# a dataset contains country with beer servings in range (0,100)
country_servings <- extract_country_servings(range = c(0,10), type = "beer_servings")
# a dataset contains country with beer servings in range (0,100)
country_servings <- extract_country_servings(range = c(0,5), type = "beer_servings")
tab <- data.frame(Arguments = c("`name`","`type`"),
Description = c("Country names","The type of alcohol servings"))
knitr::kable(tab)
calculate_country_alcohol(country_servings[1])
calculate_country_alcohol(country_servings[1], type = "beer_servings")
View(country_servings)
country_servings[1]
calculate_country_alcohol(country_servings$country, type = "beer_servings")
# Average wine servings of China, Japan, France, Australia and USA
# show a data.frane of difference between wine_servings of each country with the average wine_servings.
country <- c("China","Japan","France", "Australia","USA")
cal_wine <- calculate_country_alcohol(country, "wine_servings")
# calculate average beer servings of countries with beer servings in range (0,100)
# show a data.frame of difference between beer servings of each country with the average beer servings.
cal_beer <- calculate_country_alcohol(country_servings$country, type = "beer_servings")
head(cal_beer)
cal_beer
# Average wine servings of China, Japan, France, Australia and USA
calculate_country_alcohol(country, "wine_servings")
calculate_country_alcohol(country, "wine_servings")
# catch the return: data.frane of difference between wine_servings of each country with the average wine_servings.
cal_wine <- calculate_country_alcohol(country, "wine_servings")
cal_wine
calculate_country_alcohol(country, "wine_servings")[[1]]
calculate_country_alcohol(country, "wine_servings")[1]
# catch the return: data.frane of difference between wine_servings of each country with the average wine_servings.
cal_wine <- calculate_country_alcohol(country, "wine_servings")
cal_wine[1]
cal_wine[[1]]
# calculate average beer servings of countries with beer servings in range (0,100)
calculate_country_alcohol(country_servings$country, type = "beer_servings")
# calculate average beer servings of countries with beer servings in range (0,100)
calculate_country_alcohol(country_servings$country, type = "beer_servings")[[1]]
# calculate average beer servings of countries with beer servings in range (0,100)
calculate_country_alcohol(country_servings$country, type = "beer_servings")[[1]][1]
# calculate average beer servings of countries with beer servings in range (0,100)
# catch the return: data.frame of difference between beer servings of each country with the average beer servings.
cal_beer <- calculate_country_alcohol(country_servings$country, type = "beer_servings")
library(asdata)
library(asdata)
head(country_servings[[2]],6)
country_servings[[2]]
cal_wine[[2]]
View(cal_wine)
cal_wine <- calculate_country_alcohol(country, "wine_servings")
# Average wine servings of China, Japan, France, Australia and USA
# data.frane of difference between wine_servings of each country with the average wine_servings.
country <- c("China","Japan","France", "Australia","USA")
cal_wine <- calculate_country_alcohol(country, "wine_servings")
cal_wine[[2]]
library(asdata)
library(asdata)
tab <- data.frame(Variables = c("country","diff", "beer_servings/ spirit_servings/ wine_servings/ total_litres_of_pure_alcohol"),
Description = c("Country name","Difference between alcohol value of country and average alcohol value of selected country", "value of beer_servings, spirit_servings, wine_servings or total_litres_of_pure_alcohol"))
knitr::kable(tab)
usethis::use_test()
library(asdata)
usethis::use_test()
usethis::use_test()
calculate_country_alcohol("China", "beer_servings")
calculate_country_alcohol("China", "beer_servings")[[1]]
calculate_country_alcohol("China", "beer_servings")[[2]]
calculate_country_alcohol("China", "beer_servings")[[2]][2]
calculate_country_alcohol("China", "beer_servings")[[2]]$diff
test_that("mean", {
expect_equal(calculate_country_alcohol("China", "beer_servings")[[1]], "mean: 79")
})
library(testthat)
library(asdata)
test_check("asdata")
test_that("mean", {
expect_equal(calculate_country_alcohol("China", "beer_servings")[[1]], "mean: 79")
})
test_that("diff", {
expect_equal(calculate_country_alcohol("China", "beer_servings")[[2]]$diff, 0)
})
extract_country_servings(c(0,2),"beer_servings")
extract_country_servings(range = c(0,100), type = "beer_servings")
library(asdata)
extract_country_servings(c(0,2),"beer_servings")
extract_country_servings(c(1,2),"beer_servings")
nrow(extract_country_servings(c(1,2),"beer_servings"))
test_that("extract work", {
expect_equal(nrow(extract_country_servings(c(1,2),"beer_servings")), 5)
})
devtools::test_active_file()
devtools::test()
devtools::test_active_file()
devtools::test_active_file()
devtools::test()
library(asdata)
devtools::build()
devtools::install()
devtools::check()
devtools::check()
library(asdata)
devtools::check()
usethis::use_readme_rmd()
